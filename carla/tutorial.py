#!/usr/bin/env python

# Copyright (c) 2019 Computer Vision Center (CVC) at the Universitat Autonoma de
# Barcelona (UAB).
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.

import glob
import os
import sys

try:
    sys.path.append(glob.glob('carla/dist/carla-*%d.%d-%s.egg' % (
        sys.version_info.major,
        sys.version_info.minor,
        'win-amd64' if os.name == 'nt' else 'linux-x86_64'))[0])
except IndexError:
    pass

import carla

import random
import time
import threading
# import pygame
import weakref

class World(object):
    def __init__(self, carla_world):
        self.world = carla_world
        self.map = self.world.get_map()
        self.blueprint_library = self.world.get_blueprint_library()
        self.actor_list = []

class Car(object):
    def __init__(self, vehicle_bp, transform, carla_world):
        self.world = carla_world

        bp = self.world.blueprint_library.filter(vehicle_bp)[0]
        self.vehicle_transform = transform
        self.vehicle = self.world.world.spawn_actor(bp, self.vehicle_transform)
        self.world.actor_list.append(self.vehicle)

        self.vehicle.set_autopilot(True)


class Sensor(object):
    def __init__(self, sensor_bp, transform, parent_actor):
        self.vehicle = parent_actor
        self.camera_transform = transform
        self.world = self.vehicle.world

        bp = self.world.blueprint_library.find(sensor_bp)
        self.sensor = self.world.world.spawn_actor(bp, self.camera_transform, attach_to=self.vehicle.vehicle)
        
        self.world.actor_list.append(self.sensor)

        weak_self = weakref.ref(self)
        self.sensor.listen(lambda image: Sensor.callback(weak_self,image))

    @staticmethod
    def callback(weak_self, data):
        self = weak_self()
        if not self:
            return
        data.save_to_disk('_out/%08d_%i' % (data.frame_number, self.sensor.id))
        

def main():

    # In this tutorial script, we are going to add a vehicle to the simulation
    # and let it drive in autopilot. We will also create a camera attached to
    # that vehicle, and save all the images generated by the camera to disk.

    try:
        # First of all, we need to create the client that will send the requests
        # to the simulator. Here we'll assume the simulator is accepting
        # requests in the localhost at port 2000.
        client = carla.Client('localhost', 2000)
        client.set_timeout(5.0)

        world = World(client.get_world())

        vehicle_bp = 'model3'
        vehicle_transform = random.choice(world.map.get_spawn_points())

        vehicle = Car(vehicle_bp, vehicle_transform, world)

        
        camera_bp = ['sensor.camera.rgb', 'sensor.camera.rgb', 'sensor.lidar.ray_cast']
        camera_transform = [carla.Transform(carla.Location(x=1.5, z=2.4), carla.Rotation(pitch=-15, yaw=40)), carla.Transform(carla.Location(x=1.5, z=2.4), carla.Rotation(pitch=-15, yaw=-40)), carla.Transform(carla.Location(x=1.5, z=2.4))]

        cam1 = Sensor(camera_bp[0], camera_transform[0], vehicle)
        cam2 = Sensor(camera_bp[1], camera_transform[1], vehicle)
        lidar = Sensor(camera_bp[2], camera_transform[2], vehicle)


        time.sleep(5)

    finally:

        print('destroying actors')
        for actor in world.actor_list:
            actor.destroy()
        print('done.')


if __name__ == '__main__':

    main()
